---
import CopyCodeBlockButton from '@components/CopyCodeBlockButton'
import DevIcon, { DevIcons } from '@components/DevIcon.astro'
import { useTranslate } from '@utils/i18n/useTranslate'
import type { HTMLAttributes } from 'astro/types'
import IconButton from './IconButton'
import _ from 'lodash'
import type { Locale } from '@utils/i18n/locales'

// TODO: create a common type here for shiki registered languages
type Lang = string

export type CodeBlockProps = {
  lang: string
  title: string
  codeAsPlainText: string
  syntaxHighlightedCodeAsHtml: string
  codeBackground: string
  codeForeground: string
  locale: Locale
}

type Props = HTMLAttributes<'pre'> & CodeBlockProps

const {
  lang,
  title = '',
  codeAsPlainText = '',
  syntaxHighlightedCodeAsHtml = '',
  codeBackground,
  codeForeground,
  locale,
} = Astro.props

const t = useTranslate(locale)

let typescriptPlaygroundURL = null

function getDevIconName(lang: Lang): keyof typeof DevIcons | null {
  if (lang in DevIcons) {
    return lang as keyof typeof DevIcons
  }

  const shikiLangToDevIconName: Partial<Record<Lang, keyof typeof DevIcons>> = {
    jsx: 'javascript',
    tsx: 'typescript',
    js: 'javascript',
    ts: 'typescript',
    shell: 'bash',
  }

  if (lang in shikiLangToDevIconName) {
    return shikiLangToDevIconName[lang] ?? null
  }

  return null
}

function getShikiLangName(lang: Lang) {
  const shikiLangToName: Partial<Record<Lang, string>> = {
    jsx: 'JavaScript',
    tsx: 'TypeScript',
    javascript: 'JavaScript',
    js: 'JavaScript',
    ts: 'TypeScript',
    typescript: 'TypeScript',
    shell: 'Bash',
    html: 'HTML',
    css: 'CSS',
    mdx: 'MDX',
    python: 'Python',
  }

  if (lang in shikiLangToName) {
    return shikiLangToName[lang as keyof typeof shikiLangToName] ?? null
  }

  return null
}

const langName = getShikiLangName(lang) || lang

const devIconName = getDevIconName(lang)
---

<style
  is:global
  define:vars={{ 'code-bg': codeBackground, 'code-fg': codeForeground }}
></style>

<div
  data-codeblock
  class='last:mb-0 text-sm'
  class:list={[
    '[&_>_pre]:shadow-xs',
    '[&_>_pre]:shadow-shadow',
    '[&_>_pre]:rounded-b',
    '[&_>_pre]:overflow-x-auto',
    '[&_>_pre]:scheme-dark',
    '[&_>_pre_>_code]:py-4',
    '[&_>_pre_>_code]:grid',
    '[&_.line]:px-horizontal-padding',
    '[&_.line]:border-l-2',
    '[&_.line]:border-(--code-bg)',
    '[&_.line]:min-h-[1lh]',
    '[&_.line]:empty:last:min-h-0',
    '[&_.line.highlighted]:bg-[#272115]',
    '[&_.line.highlighted]:border-[#624710]',
    '[&_.twoslash-query-line]:px-horizontal-padding',
    '[&_.twoslash-error-line]:border-l-2',
    '[&_.twoslash-error-line]:border-(--code-bg)',
    '[&_.twoslash-error-line]:py-1',
    '[&_.twoslash-error-line]:px-4',
    '[&_.twoslash-error-line]:bg-[#d4565620]',
    '[&_.twoslash-error-line]:text-[#d45656]',
    '[&_.twoslash-error-line]:border-[#d45656]',
    '[&_.twoslash-popup-arrow]:bg-(--code-bg)',
    '[&_.twoslash-popup-container]:bg-(--code-bg)',
  ]}
>
  <div
    data-codeblock-header
    class:list={[
      'dark',
      'flex',
      'items-center',
      'gap-2',
      'rounded-t',
      'py-1',
      'bg-(--code-bg)',
      'text-(--code-fg)',
      'border-b',
      'border-divider',
    ]}
  >
    <div
      class:list={['flex', 'pl-horizontal-padding', 'items-center', 'gap-2']}
    >
      {devIconName !== null && <DevIcon size='1em' name={devIconName} />}

      <div class:list={['rtl', 'truncate', 'text-lg']}>
        {
          title ? (
            <bdi>{title}</bdi>
          ) : langName === 'plaintext' || langName === '' ? (
            t['NoName']
          ) : (
            langName
          )
        }
      </div>
    </div>

    <div class='ml-auto flex flex-row gap-2 pr-2'>
      {
        typescriptPlaygroundURL && (
          <IconButton
            variant='rounded'
            href={typescriptPlaygroundURL}
            target='_blank'
            className='[&_svg_*]:fill-(--code-fg)'
            aria-label={t['LinkToTypeScriptPlaygroundIconAriaLabel']}
          >
            <DevIcon size='24px' name='typescript' />
          </IconButton>
        )
      }

      <CopyCodeBlockButton
        client:load
        successText={t['Copied'] + '!'}
        errorText={t['FailedToCopy']}
        code={codeAsPlainText}
      />
    </div>
  </div>

  <Fragment set:html={syntaxHighlightedCodeAsHtml} />
</div>

<script>
  import { computePosition, offset, flip, shift, arrow } from '@floating-ui/dom'

  const htmlComputedStyles = window.getComputedStyle(document.documentElement)
  const tooltipArrowSize = htmlComputedStyles.getPropertyValue(
    '--tooltip-arrow-size',
  )

  const triggers = document.querySelectorAll('.twoslash-hover')

  const triggerComputedStyles = window.getComputedStyle(triggers[0])
  const codeBackground = triggerComputedStyles.getPropertyValue('--code-bg')
  const codeForeground = triggerComputedStyles.getPropertyValue('--code-fg')

  triggers.forEach((trigger) => {
    const showTooltip = async () => {
      const template = trigger.parentElement?.querySelector('template')
      if (!template) {
        return
      }

      const tooltip = document.createElement('div')
      tooltip.id = 'twoslash-tooltip'
      tooltip.setAttribute('role', 'tooltip')
      tooltip.classList.add('twoslash-tooltip', 'absolute')
      tooltip.innerHTML = template.innerHTML

      const popupContainer = tooltip.querySelector('.twoslash-popup-container')
      if (popupContainer == null) {
        throw new Error(`Unexpected Missing Twoslash Popup Container`)
      }
      if (!(popupContainer instanceof HTMLDivElement)) {
        throw new Error(
          `Unexpected Twoslash Popup Container Element: ${popupContainer}`,
        )
      }
      Object.assign(popupContainer.style, {
        backgroundColor: codeBackground,
        color: codeForeground,
      })

      const arrowEl = document.createElement('div')
      arrowEl.classList.add('absolute', 'twoslash-popup-arrow')
      Object.assign(arrowEl.style, {
        width: tooltipArrowSize,
        height: tooltipArrowSize,
      })
      tooltip.insertBefore(arrowEl, tooltip.firstElementChild)

      document.body.append(tooltip)

      const { x, y, middlewareData, placement } = await computePosition(
        trigger,
        tooltip,
        {
          placement: 'bottom-start',
          middleware: [
            offset(8),
            flip(),
            shift({ padding: 5 }),
            arrow({ element: arrowEl, padding: 16 }),
          ],
        },
      )

      Object.assign(tooltip.style, {
        left: `${x}px`,
        top: `${y}px`,
      })

      if (middlewareData.arrow) {
        const side = placement.split('-')[0]

        if (
          side !== 'top' &&
          side !== 'right' &&
          side !== 'bottom' &&
          side !== 'left'
        ) {
          throw new Error(`Unexpected placement side: ${side}`)
        }

        arrowEl.setAttribute('data-side', side)

        const staticSide = {
          top: 'bottom',
          right: 'left',
          bottom: 'top',
          left: 'right',
        }[side]

        const arrowPosition = middlewareData.arrow

        Object.assign(arrowEl.style, {
          left: arrowPosition?.x != null ? `${arrowPosition.x}px` : '',
          top: arrowPosition?.y != null ? `${arrowPosition.y}px` : '',
          [staticSide as keyof typeof staticSide]: `calc(-${tooltipArrowSize} / 2)`,
          backgroundColor: codeBackground,
        })
      }
    }

    const hideTooltip = () => {
      const activeTooltip = document.getElementById('twoslash-tooltip')
      if (activeTooltip) {
        activeTooltip.remove()
      }
    }

    trigger.addEventListener('mouseover', showTooltip)
    trigger.addEventListener('mouseleave', hideTooltip)
  })
</script>
