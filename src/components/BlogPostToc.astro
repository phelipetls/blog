---
import type { MarkdownHeading } from 'astro'
import { useTranslate } from '@utils/i18n/useTranslate'
import { List, ChevronDown } from 'lucide-react'
// @ts-expect-error this library is not written in TypeScript
import { TOC } from 'astro-toc'
import type { Locale } from '@utils/i18n/locales'

type Props = {
  locale: Locale
  headings: MarkdownHeading[]
}

const { headings, locale } = Astro.props

const t = useTranslate(locale)

const tocItems = headings.map((heading) => ({
  depth: heading.depth,
  title: heading.text,
  url: `#${heading.slug}`,
}))
---

<div class='hidden lg:flex lg:h-full lg:flex-col'>
  <div class:list={['flex', 'items-center', 'gap-2', 'h-10', 'flex-none']}>
    <List />

    <h2 class='m-0'>{t['TableOfContents']}</h2>

    <div
      class='ml-auto flex items-center transition-transform duration-150 ease-in group-open:rotate-180 lg:hidden'
    >
      <ChevronDown />
    </div>
  </div>

  <nav
    data-toc-wrapper
    class:list={[
      'pt-4',
      'h-full',
      'min-h-0',
      'lg:overflow-y-auto',
      '[&_a_*]:indent-0',
      '[&_ol]:m-0',
      '[&_ol]:list-none',
      '[&_ol]:indent-4',
      '[&_ol_li[data-active]>a]:text-primary',
      '[&_ol_li[data-active]]:before:bg-primary',
      '[&_ol_li]:relative',
      '[&_ol_li]:before:absolute',
      '[&_ol_li]:before:left-0',
      '[&_ol_li]:before:top-0',
      '[&_ol_li]:before:h-full',
      '[&_ol_li]:before:w-px',
      '[&_ol_li]:before:bg-divider',
      "[&_ol_li]:before:content-['']",
      '[&_ol_li_a:hover]:bg-hover',
      '[&_ol_li_a]:block',
      '[&_ol_li_a]:truncate',
      '[&_ol_li_a]:border-b-0',
      '[&_ol_li_a]:transition-colors',
      '[&_ol_li_a]:duration-300',
      '[&_ol_ol]:indent-8',
      '[&_ol_ol_ol]:indent-12',
      '[&_ol_ol_ol_ol]:indent-16',
    ]}
  >
    <TOC toc={tocItems} as='number' />
  </nav>
</div>

<details
  class='group px-horizontal-padding py-4 lg:hidden'
  aria-label={t['TableOfContents']}
>
  <summary class='list-none'>
    <div class='flex items-center gap-2'>
      <List />

      <h2 class='m-0'>{t['TableOfContents']}</h2>

      <div
        class='flex items-center ml-auto transition-transform duration-150 ease-in group-open:rotate-180 lg:hidden'
      >
        <ChevronDown />
      </div>
    </div>
  </summary>

  <nav
    data-toc-wrapper
    class:list={[
      'mt-4',
      '[&_ol]:m-0',
      '[&_ol]:list-outside',
      '[&_ol]:px-horizontal-padding',
      '[&_ol_li:not(:first-child)]:mt-1',
    ]}
  >
    <TOC toc={tocItems} as='number' />
  </nav>
</details>

<script>
  const toc = document.querySelector<HTMLElement>('nav[data-toc-wrapper] ol')
  const tocContainer = toc?.closest<HTMLElement>('[data-toc-wrapper]')
  const blogPost = document.querySelector('[data-blog-post]') as HTMLElement
  const firstTocItem = toc?.querySelector('li')

  function activate(listItem: HTMLLIElement): void {
    listItem.setAttribute('data-active', '')
  }

  function deactivate(listItem: HTMLLIElement): void {
    listItem.removeAttribute('data-active')
  }

  function deactivateAllTocItems(): void {
    toc?.querySelectorAll('li').forEach(deactivate)
  }

  function getTocItemByHeading(
    heading: HTMLHeadingElement
  ): HTMLLIElement | null {
    const headingId = heading.getAttribute('id')
    const tocAnchorElem = toc?.querySelector(`li a[href="#${headingId}"]`)

    if (!tocAnchorElem) {
      return null
    }

    return tocAnchorElem.closest('li')
  }

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry): void => {
        if (!tocContainer) {
          return
        }

        const heading = entry.target

        if (entry.isIntersecting) {
          const tocItem = getTocItemByHeading(heading as HTMLHeadingElement)

          if (!tocItem) {
            return
          }

          deactivateAllTocItems()
          activate(tocItem)

          const tocContainerCoords = tocContainer.getBoundingClientRect()
          const tocItemCoords = tocItem.getBoundingClientRect()

          if (tocItem === firstTocItem) {
            tocContainer.scrollTop = 0
            return
          }

          // Is the item not visible because it's above the scrollable area? Then
          // make it visible by scrolling up.
          if (tocContainerCoords.top > tocItemCoords.top) {
            tocContainer.scrollTop -= tocContainerCoords.top - tocItemCoords.top
            return
          }

          if (tocItemCoords.bottom > tocContainerCoords.bottom) {
            tocContainer.scrollTop +=
              tocItemCoords.bottom - tocContainerCoords.bottom
          }
        }
      })
    },
    {
      threshold: 1,
    }
  )

  const headingsInBlogPost = blogPost.querySelectorAll('h2, h3, h4, h4, h6')

  for (const headingInBlogPost of headingsInBlogPost) {
    observer.observe(headingInBlogPost)
  }
</script>
