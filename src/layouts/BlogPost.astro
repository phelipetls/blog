---
import { format } from 'date-fns'
import { useTranslate } from '@utils/i18n/useTranslate'
import { getBlogPostFolderName } from '@utils/posts/getBlogPostFolderName'
import Site from '@layouts/Site.astro'
import BlogPostTag from '@components/BlogPostTag.astro'
import Katex from '@components/Katex.astro'
import PostNav from '@components/PostNav.astro'
import BlogPostDate from '@components/BlogPostDate.astro'
import BlogPostToc from '@components/BlogPostToc.astro'
import BlogPostReadingTime from '@components/BlogPostReadingTime.astro'
import { getSandpackCssText } from '@codesandbox/sandpack-react'
import { formatISO } from 'date-fns'
import { render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import IconButton from '@components/IconButton'
import clsx from 'clsx'
import { FileCode2, List, X } from 'lucide-react'
import CodeBlock from '@components/CodeBlock.astro'
import Link from '@components/Link.astro'
import H2 from '@components/H2.astro'
import H3 from '@components/H3.astro'
import H4 from '@components/H4.astro'
import H5 from '@components/H5.astro'
import H6 from '@components/H6.astro'
import Paragraph from '@components/Paragraph.astro'
import type { Locale } from '@utils/i18n/locales'
import { getAbsoluteLocaleUrl } from 'astro:i18n'

type Props = {
  locale: Locale
  blogPost: CollectionEntry<'posts'> & { isTranslated: boolean }
  nextBlogPost: CollectionEntry<'posts'> | null
  prevBlogPost: CollectionEntry<'posts'> | null
}

const { locale, blogPost, nextBlogPost, prevBlogPost } = Astro.props
const { Content, headings, remarkPluginFrontmatter } = await render(blogPost)

const ogImageUrl =
  getAbsoluteLocaleUrl(
    locale,
    `/posts/${getBlogPostFolderName(Astro.props.blogPost)}`
  ) + 'image.png'

const t = useTranslate(locale)

const tocWouldBeEmpty = headings.length === 0
---

<Site
  locale={locale}
  isTranslated={blogPost.isTranslated}
  title={`${blogPost.data.title} - Phelipe Teles`}
  description={remarkPluginFrontmatter.summary}
  seo={{
    openGraph: {
      basic: {
        title: `${blogPost.data.title}`,
        image: ogImageUrl,
        type: 'article',
      },
      article: {
        tags: blogPost.data.tags,
        publishedTime: formatISO(new Date(blogPost.data.date)),
        authors: ['Phelipe Teles'],
      },
    },
    twitter: {
      card: 'summary_large_image',
    },
    extend: {
      meta: [
        {
          name: 'twitter:image',
          content: ogImageUrl,
        },
      ],
    },
  }}
  htmlClass='scroll-smooth scroll-pt-nav-height sm:scroll-pt-0'
>
  <Fragment slot='head'>
    <meta
      name='publish-date'
      content={format(blogPost.data.date, 'yyyy-MM-dd')}
    />
    {
      blogPost.data.tags && (
        <meta name='keywords' content={blogPost.data.tags.join(', ')} />
      )
    }
    <meta name='description' content={remarkPluginFrontmatter.summary} />

    {blogPost.data.math && <Katex />}

    {/* FIXME: only include this if the page needs it */}
    <style id='sandpack' set:html={getSandpackCssText()}></style>
  </Fragment>

  <main class='grid grid-cols-layout'>
    <div class='sm:col-content px-0'>
      <article>
        <header class='flex flex-col'>
          <h1 class='mb-4 text-4xl max-w-prose'>
            {blogPost.data.title}
          </h1>

          <div class='mb-4 flex gap-2 flex-row flex-wrap'>
            <BlogPostDate locale={locale} date={blogPost.data.date} showYear />
            <BlogPostReadingTime
              readingTime={remarkPluginFrontmatter.readingTime}
            />
            <Link
              class='flex flex-row gap-2 items-center flex-shrink-0'
              target='_blank'
              href={`https://github.com/phelipetls/blog/blob/master/${blogPost.filePath}`}
            >
              <FileCode2 />
              {t['LinkToSourceLabel']}
            </Link>
          </div>

          {
            blogPost.data.tags && (
              <div class='mb-4 flex max-w-lg flex-wrap gap-2'>
                {blogPost.data.tags.map((tag) => {
                  return <BlogPostTag locale={locale} tag={tag} />
                })}

                <BlogPostTag locale={locale} tag='...' />
              </div>
            )
          }
        </header>

        <hr class='my-8' />

        <div
          data-blog-post-container
          data-toc={tocWouldBeEmpty ? 'closed' : 'open'}
          class:list={[
            'group',
            'flex',
            'flex-col',
            'lg:gap-8',
            !tocWouldBeEmpty && 'lg:flex-row-reverse',
          ]}
        >
          {
            !tocWouldBeEmpty && (
              <aside
                style={{
                  '--offset-from-top': '1rem',
                }}
                class:list={[
                  'relative',
                  'shrink-0',
                  'mb-8',
                  'lg:group-data-toc-open:card',
                  'lg:ml-auto',
                  'lg:mb-0',
                  'lg:basis-1/3',
                  'lg:sticky',
                  'lg:top-[var(--offset-from-top)]',
                  'lg:h-[calc(100vh-var(--offset-from-top)_*_2)]',
                ]}
              >
                <IconButton
                  data-toggle-toc
                  variant='rounded-full'
                  data-open-toc-label={t['OpenToc']}
                  data-closed-toc-label={t['CloseToc']}
                  aria-label={t['CloseToc']}
                  style={{
                    // @ts-expect-error I'm allowed to do this
                    '--duration': '150ms',
                  }}
                  data-preload
                  className={clsx(
                    'z-1',
                    'absolute',
                    'top-4',
                    'right-4',
                    'hidden',
                    'lg:grid',
                    'lg:min-w-0',
                    'lg:group-data-toc-open:grid-cols-[0fr_max-content]',
                    'lg:group-data-toc-closed:grid-cols-[1fr_max-content]',
                    'transition-all',
                    'duration-[var(--duration)]',
                    'ease-in-out',
                    'overflow-hidden',
                    'lg:justify-center'
                  )}
                >
                  <X
                    className={clsx(
                      'col-start-2',
                      'col-end-2',
                      'row-start-1',
                      'row-end-1',
                      'scale-0',
                      'transition-transform',
                      'duration-[var(--duration)]',
                      'ease-out',
                      'group-data-toc-open:scale-100',
                      'group-data-toc-open:delay-[var(--duration)]'
                    )}
                  />

                  <List
                    className={clsx(
                      'col-start-2',
                      'col-end-2',
                      'row-start-1',
                      'row-end-1',
                      'scale-0',
                      'transition-transform',
                      'duration-[var(--duration)]',
                      'ease-in',
                      'group-data-toc-closed:scale-100',
                      'group-data-toc-closed:delay-[var(--duration)'
                    )}
                  />

                  <div
                    class:list={[
                      'col-start-1',
                      'col-end-1',
                      'group-data-toc-closed:mx-2',
                      'truncate',
                    ]}
                  >
                    {t['OpenToc']}
                  </div>
                </IconButton>

                <div
                  data-blog-post-toc-container
                  data-preload
                  class:list={[
                    'max-lg:card',
                    'lg:h-full',
                    'lg:p-4',
                    'lg:ml-auto',
                    'lg:group-data-toc-open:translate-x-0',
                    'lg:group-data-toc-open:scale-x-1',
                    'lg:group-data-toc-open:opacity-1',
                    'lg:group-data-toc-closed:translate-x-full',
                    'lg:group-data-toc-closed:opacity-0',
                    'lg:group-data-toc-closed:scale-x-0',
                    'lg:group-data-toc-closed:pointer-events-none',
                    'transition-[transform,opacity]',
                    'duration-300',
                    'ease-in-out',
                  ]}
                >
                  <BlogPostToc locale={locale} headings={headings} />
                </div>
              </aside>
            )
          }

          <div
            data-blog-post
            class:list={[
              'min-w-0',
              '[&>pre]:my-8',
              '[&>pre]:max-sm:full-bleed',
              '[&>[data-codeblock]]:my-8',
              '[&>[data-codeblock]]:max-sm:full-bleed',
              '[&>[data-codeblock]_pre]:max-sm:rounded-none',
              '[&>[data-codeblock]_[data-codeblock-header]]:max-sm:rounded-none',
              '[&>hr]:border-0',
              '[&>hr]:text-center',
              "[&>hr]:after:content-['⁂']",
              '[&>figure]:max-sm:full-bleed',
              '[&>astro-island>div]:my-8',
              '[&>lite-youtube]:my-8',
              '[&>blockquote]:my-8',
              '[&>figure_video]:min-h-[15em]',
              '[&_.katex-display_.katex]:text-left',
              '[&_.katex-display_.katex]:ml-horizontal-padding',
              '[&_.katex-display]:overflow-x-auto',
              '[&_.katex-display]:overflow-y-hidden',
            ]}
          >
            <Content
              components={{
                pre: CodeBlock,
                a: Link,
                p: Paragraph,
                h1: H2,
                h2: H3,
                h3: H4,
                h4: H5,
                h5: H6,
                Fragment,
              }}
            />
          </div>
        </div>
      </article>

      <hr class='max-sm:full-bleed mt-8' />

      <PostNav
        locale={locale}
        class='max-sm:full-bleed sm:my-8'
        prevBlogPost={prevBlogPost}
        nextBlogPost={nextBlogPost}
      />

      <hr class='max-sm:full-bleed mb-8' />
    </div>
  </main>
</Site>

<script>
  const blogPostContainer = document.querySelector('[data-blog-post-container]')

  const toggleTocButton = document.querySelector('[data-toggle-toc]')

  const tocContainer = document.querySelector('[data-blog-post-toc-container]')

  const storedTocState = localStorage.getItem('__preferred_toc_state')
  if (storedTocState !== null) {
    if (storedTocState === 'open') {
      openToc()
    } else {
      closeToc()
    }
  }

  function openToc() {
    if (
      blogPostContainer instanceof HTMLElement &&
      toggleTocButton instanceof HTMLButtonElement
    ) {
      blogPostContainer.setAttribute('data-toc', 'open')
      localStorage.setItem('__preferred_toc_state', 'open')
      toggleTocButton.setAttribute(
        'aria-label',
        toggleTocButton.dataset.closedTocLabel ?? ''
      )
    }
  }

  function closeToc() {
    if (
      blogPostContainer instanceof HTMLElement &&
      toggleTocButton instanceof HTMLButtonElement
    ) {
      blogPostContainer.setAttribute('data-toc', 'closed')
      localStorage.setItem('__preferred_toc_state', 'closed')
      toggleTocButton.setAttribute(
        'aria-label',
        toggleTocButton.dataset.openTocLabel ?? ''
      )
    }
  }

  toggleTocButton?.addEventListener('click', () => {
    if (!(blogPostContainer instanceof HTMLDivElement)) {
      return
    }

    const tocIsOpen = blogPostContainer.dataset.toc === 'open'

    if (tocIsOpen) {
      closeToc()
      tocContainer?.addEventListener(
        'transitionend',
        () => {
          tocContainer.classList.add('invisible')
        },
        {
          once: true,
        }
      )
    } else {
      openToc()
      tocContainer?.classList.remove('invisible')
    }
  })
</script>
