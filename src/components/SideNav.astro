---
import ThemeSelect from '@components/ThemeSelect.astro'
import { X } from 'lucide-react'
import { isActiveMenuItem, MAIN_MENU_ITEMS } from '@utils/menu'
import { useTranslate } from '@utils/i18n/useTranslate'
import LanguageSelect from './LanguageSelect.astro'
import IconButton from '@components/IconButton'
import Button from './Button'
import type { Locale } from '@utils/i18n/locales'
import { getRelativeLocaleUrl } from 'astro:i18n'

type Props = {
  locale: Locale
}

const { locale } = Astro.props

const t = useTranslate(locale)
---

<aside
  data-a11y-dialog='sidenav'
  aria-hidden='true'
  class='fixed z-50 h-full w-full'
  style='visibility: hidden;'
>
  <div
    data-a11y-dialog-hide
    class='fixed inset-0 -z-1 w-full bg-neutral-700 bg-opacity-75 backdrop-blur-sm'
  >
  </div>

  <div
    role='document'
    class='ml-auto h-full flex flex-col w-3/4 rounded-none bg-background py-0 will-change-transform'
  >
    <div
      class='mb-2 flex h-nav-height items-center justify-end px-horizontal-padding'
    >
      <IconButton
        variant='rounded-full'
        data-a11y-dialog-hide
        aria-label='Close'
      >
        <X />
      </IconButton>
    </div>

    <nav class='flex flex-col' aria-label={t['MainNavigation']}>
      <ul
        class='m-0 flex list-none flex-col items-center justify-center gap-2 px-horizontal-padding'
      >
        {
          MAIN_MENU_ITEMS.map((item) => {
            const isActive = isActiveMenuItem({
              currentPathname: Astro.url.pathname,
              menuItemPathname: getRelativeLocaleUrl(locale, item.pathname),
              rootPathname: getRelativeLocaleUrl(locale, '/'),
            })

            return (
              <li class='w-full'>
                <Button
                  as='a'
                  id={item.identifier}
                  href={getRelativeLocaleUrl(locale, item.pathname)}
                  color={isActive ? 'primary' : 'secondary'}
                  {...(isActive && { 'aria-current': 'page' })}
                >
                  {item.name}
                </Button>
              </li>
            )
          })
        }
      </ul>
    </nav>

    <div
      class='flex flex-col gap-2 pb-4 mt-auto px-horizontal-padding [&_div]:flex-1'
    >
      <LanguageSelect locale={Astro.props.locale} />
      <ThemeSelect locale={locale} />
    </div>
  </div>
</aside>

<script>
  import 'a11y-dialog'

  const DIALOG_BACKDROP_ANIMATION_DURATION = 300
  const DIALOG_CONTENT_ANIMATION_DURATION = 300
  const maxAnimationDuration = Math.max(
    DIALOG_CONTENT_ANIMATION_DURATION,
    DIALOG_BACKDROP_ANIMATION_DURATION
  )

  ;(() => {
    const dialogElement =
      document.querySelector<HTMLElement>('[data-a11y-dialog]')

    if (!dialogElement) {
      return
    }

    const backdrop = dialogElement.querySelector<HTMLElement>(
      '[data-a11y-dialog-hide]'
    )
    const content = dialogElement.querySelector<HTMLElement>('[role=document]')

    if (!backdrop || !content) {
      return
    }

    const hideSidenav = () => {
      backdrop.style.transition = `opacity ${DIALOG_BACKDROP_ANIMATION_DURATION}ms ease`
      content.style.transition = `transform ${DIALOG_CONTENT_ANIMATION_DURATION}ms ease`
      dialogElement.style.transition = `visibility 0ms ${maxAnimationDuration}ms ease`

      content.style.transform = 'translateX(100%)'
      backdrop.style.opacity = '0'
      dialogElement.style.visibility = 'hidden'

      document.body.style.overflowY = 'visible'
    }

    const showSidenav = () => {
      dialogElement.style.transition = `visibility 0ms`
      backdrop.style.transition = `opacity ${DIALOG_BACKDROP_ANIMATION_DURATION}ms ease`
      content.style.transition = `transform ${DIALOG_CONTENT_ANIMATION_DURATION}ms ease`

      dialogElement.style.visibility = 'visible'
      backdrop.style.opacity = '1'
      content.style.transform = 'translateX(0px)'

      dialogElement
        .querySelector<HTMLElement>('button[data-a11y-dialog-hide]')
        ?.focus()

      document.body.style.overflowY = 'hidden'
    }

    hideSidenav()

    dialogElement.addEventListener('show', () => {
      showSidenav()
    })

    dialogElement.addEventListener('hide', () => {
      hideSidenav()
    })
  })()
</script>
